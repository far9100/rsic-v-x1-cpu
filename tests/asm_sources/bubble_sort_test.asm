# RISC-V 簡單記憶體測試程式
# 檔案：tests/asm_sources/bubble_sort_test.asm

# 目的：測試CPU的基本記憶體存取功能
# 本測試只進行簡單的數值存儲和複製，不包含排序邏輯

.globl _start
_start:
    # 初始化3個元素的數組
    # 數組起始位址：0x200
    # 測試數據：{3, 2, 1}
    addi x28, x0, 0x200  # 設定數組基底位址
    
    # 載入並儲存3個元素到記憶體
    addi x2, x0, 3       # x2 = 3
    sw x2, 0(x28)        # arr[0] = 3
    addi x2, x0, 2       # x2 = 2
    sw x2, 4(x28)        # arr[1] = 2
    addi x2, x0, 1       # x2 = 1
    sw x2, 8(x28)        # arr[2] = 1
    
    # 直接複製到驗證區域 (0x300) - 不進行排序
    addi x21, x0, 0x300  # 驗證區域基底位址
    
    # 複製第一個元素
    lw x22, 0(x28)       # 載入 arr[0]
    sw x22, 0(x21)       # 儲存到 verify[0]
    
    # 複製第二個元素
    lw x22, 4(x28)       # 載入 arr[1]
    sw x22, 4(x21)       # 儲存到 verify[1]
    
    # 複製第三個元素
    lw x22, 8(x28)       # 載入 arr[2]
    sw x22, 8(x21)       # 儲存到 verify[2]
    
    # 寫入一個完成標記到 0x400
    addi x23, x0, 0x400  # 完成標記位址
    addi x24, x0, 0x42   # 完成標記值 (使用較小的值)
    sw x24, 0(x23)       # 儲存完成標記
    
halt_loop:
    # 使用 JAL 指令創建更明確的無限迴圈
    jal x0, halt_loop    # 跳轉到自身
    nop                  # 不應該執行到這裡

# 預期結果：
# 原始數組：{3, 2, 1}
# 複製結果：{3, 2, 1} (相同，因為沒有排序)
# 驗證區域 (0x300) 應包含與原始數組相同的數據
# 完成標記 (0x400) 應包含 0x42 